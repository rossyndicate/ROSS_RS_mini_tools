// B. Steele        //
// Data Scientist   //
// ROSSyndicate     //
// Colorado State University    //
// b.steele@colostate.edu   //

// load image collections //
var l7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2');
var l5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2');
var l4 = ee.ImageCollection('LANDSAT/LT04/C02/T1_L2');

// the metadata for these layers are the same, so we don't need any placeholder layers for harmonization //

var ls47 = l4.merge(l5).merge(l7);

// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
}

ls47 = ls47.map(applyScaleFactors);

// existing band names
var bn457 = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'SR_CLOUD_QA', 'QA_RADSAT'];
// new band names
var bns = ['Blue', 'Green', 'Red', 'Nir', 'Swir1', 'Swir2', 'pixel_qa', 'cloud_qa', 'radsat_qa'];
  
// rename bands  
var ls47 = ls47.select(bn457, bns);



// ---- APPLY QA MASKS ---- //
// Filter out pixels saturated for any band
function satQAMask(image) {
  var satQA = image.select('radsat_qa');
  var sat = satQA.bitwiseAnd(1 << 0) // band 1
    .where(satQA.bitwiseAnd(1 << 1), ee.Image(2)) // band 2
    .where(satQA.bitwiseAnd(1 << 2), ee.Image(3)) // band 3
    .where(satQA.bitwiseAnd(1 << 3), ee.Image(4)) // band 4
    .where(satQA.bitwiseAnd(1 << 4), ee.Image(5)) // band 5
    .where(satQA.bitwiseAnd(1 << 5), ee.Image(6)) // band 6
    .where(satQA.bitwiseAnd(1 << 6), ee.Image(7)) // band 7
    .where(satQA.bitwiseAnd(1 << 7), ee.Image(8)) // band 8
    .where(satQA.bitwiseAnd(1 << 9), ee.Image(9)); // band 9
  var satMask = sat.eq(0); //all must be non-saturated per pixel
  return image.updateMask(satMask);
}

// map pixel saturation mask
var ls47 = ls47.map(satQAMask);

// Filter for water, cloud, cloud shadow, snow
function cfMask(image) {
  var qa = image.select('pixel_qa');
  var water = qa.bitwiseAnd(1 << 7); //water bit
  var cloudqa = qa.bitwiseAnd(1 << 1) //
    .where(qa.bitwiseAnd(1 << 2), ee.Image(2)) //
    .where(qa.bitwiseAnd(1 << 3), ee.Image(3)) // clouds
    .where(qa.bitwiseAnd(1 << 4), ee.Image(4)) // cloud shadows
    .where(qa.bitwiseAnd(1 << 5), ee.Image(5)); // snow/ice
  var qaMask = cloudqa.eq(0);
  return image.updateMask(qaMask).updateMask(water);
}

// Apply water and cloud mask
var ls47 = ls47.map(cfMask);


// Filter out sr cloud qa issues -- these come from atm corr processing; however the pixel QA is still more resilient than these. 
// Use this as a secondary filter on top of pixel qa to mask out invalid pixels during atm correction
function srCloudMask(image) {
  var srCloudQA = image.select('cloud_qa');
  var srcloud = srCloudQA.bitwiseAnd(1 << 1) // cloud
    .where(srCloudQA.bitwiseAnd(1 << 2), ee.Image(2)) // cloud shadow
    .where(srCloudQA.bitwiseAnd(1 << 3), ee.Image(3)) // adjacent to cloud
    .where(srCloudQA.bitwiseAnd(1 << 4), ee.Image(4)); //snow/ice
  var revSRcloud = srcloud.eq(0); // mask to low or climatological aerosol mask only (where bit 7 is 0)
  return image.updateMask(revSRcloud);
}

// apply srCloudMask
var ls47 = ls47.map(srCloudMask);


//------------------------------------------------------//
// APPLY DSWE CALCULAITON AND FILTER //

// DSWE functions (from Sam Sillen, adpated from S Topp)
// must use image expression, otherwise too many false negatives!
function Mndwi(image){ 
  return(image
  .expression('(GREEN - SWIR1) / (GREEN + SWIR1)', {
    'GREEN': image.select(['Green']),
    'SWIR1': image.select(['Swir1'])
  }));
}

//Multi-band Spectral Relationship Visible
function Mbsrv(image){
  return(image.select(['Green']).add(image.select(['Red'])).rename('mbsrv'));
}

//Multi-band Spectral Relationship Near infrared
function Mbsrn(image){
  return(image.select(['Nir']).add(image.select(['Swir1'])).rename('mbsrn'));
}

//Normalized Difference Vegetation Index
function Ndvi(image){
  return(image
  .expression('(NIR - RED) / (NIR + RED)', {
    'RED': image.select(['Red']),
    'NIR': image.select(['Nir'])
  }));
}

//Automated Water Extent Shadow
function Awesh(image){
  return(image
  .expression('Blue + 2.5 * Green + (-1.5) * mbsrn + (-0.25) * Swir2', {
    'Blue': image.select(['Blue']),
    'Green': image.select(['Green']),
    'mbsrn': Mbsrn(image).select(['mbsrn']),
    'Swir2': image.select(['Swir2'])
  }));
}

//Dynamic Surface Water Extent Calculation
function Dswe(i){
  var mndwi = Mndwi(i);
  var mbsrv = Mbsrv(i);
  var mbsrn = Mbsrn(i);
  var awesh = Awesh(i);
  var swir1 = i.select(['Swir1']);
  var nir = i.select(['Nir']);
  var ndvi = Ndvi(i);
  var blue = i.select(['Blue']);
  var swir2 = i.select(['Swir2']);
  
  // These thresholds are taken from the LS Collection 2 DSWE Data Format Control Book:
  // (https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/media/files/LSDS-2042_LandsatC2_L3_DSWE_DFCB-v2.pdf)
  // Inputs are meant to be scaled reflectance values 

  var t1 = mndwi.gt(0.124); // MNDWI greater than Wetness Index Threshold
  var t2 = mbsrv.gt(mbsrn); // MBSRV greater than MBSRN
  var t3 = awesh.gt(0); //AWESH greater than 0
  var t4 = (mndwi.gt(-0.44)  //Partial Surface Water 1 thresholds
   .and(swir1.lt(0.09)) //900 for no scaling (LS Collection 1)
   .and(nir.lt(0.15)) //1500 for no scaling (LS Collection 1)
   .and(ndvi.lt(0.7)));
  var t5 = (mndwi.gt(-0.5) //Partial Surface Water 2 thresholds
   .and(blue.lt(0.1)) //1000 for no scaling (LS Collection 1)
   .and(swir1.lt(0.3)) //3000 for no scaling (LS Collection 1)
   .and(swir2.lt(0.1)) //1000 for no scaling (LS Collection 1)
   .and(nir.lt(0.25))); //2500 for no scaling (LS Collection 1)
  
  var t = (t1
    .add(t2.multiply(10))
    .add(t3.multiply(100))
    .add(t4.multiply(1000))
    .add(t5.multiply(10000)));
  
  var noWater = (t.eq(0)
   .or(t.eq(1))
   .or(t.eq(10))
   .or(t.eq(100))
   .or(t.eq(1000)));
  var hWater = (t.eq(1111)
   .or(t.eq(10111))
   .or(t.eq(11011))
   .or(t.eq(11101))
   .or(t.eq(11110))
   .or(t.eq(11111)));
  var mWater = (t.eq(111)
   .or(t.eq(1011))
   .or(t.eq(1101))
   .or(t.eq(1110))
   .or(t.eq(10011))
   .or(t.eq(10101))
   .or(t.eq(10110))
   .or(t.eq(11001))
   .or(t.eq(11010))
   .or(t.eq(11100)));
  var pWetland = t.eq(11000);
  var lWater = (t.eq(11)
   .or(t.eq(101))
   .or(t.eq(110))
   .or(t.eq(1001))
   .or(t.eq(1010))
   .or(t.eq(1100))
   .or(t.eq(10000))
   .or(t.eq(10001))
   .or(t.eq(10010))
   .or(t.eq(10100)));

  var iDswe = (noWater.multiply(0)
   .add(hWater.multiply(1))
   .add(mWater.multiply(2))
   .add(pWetland.multiply(3))
   .add(lWater.multiply(4)));
  
  return iDswe.rename('dswe');
}

// Create function to apply dswe as mask
function applyDSWE(image){
  var dswe = Dswe(image);
  var DSWEmask = image.addBands(dswe)
    .updateMask(dswe.eq(1));
  return DSWEmask;
}

//Apply DSWE mask
var ls47_dswe = ls47.map(applyDSWE);



//------------------------------------------------------//
// VISUALIZE TO CHECK WORK //
var visualization = {
  bands: ['Red', 'Green', 'Blue'],
  min: 0.0,
  max: 0.3,
};

Map.setCenter(-91.89, 46.69, 12);

var info = ls47_dswe.first().getInfo();

Map.addLayer(ls47_dswe, visualization, 'True Color (432)');


print(info);
